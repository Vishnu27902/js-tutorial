HTML (HyperText Markup Language)

Version 5
Case insensitive
XML-based markup language for creating web pages
Extensible with Cascading Style Sheets
Web browsers can render XML or HTML documents
Common file extension:.html,.htm
CDN - Content Delivery Network
White including JS files (async/defer)
Inline
Block
iframe

CSS (Cascading Style Sheets)

Version 3
CSS Selectors
Element Selector
Class selector
ID Selector
Group Selector
Pseudo Selectors
Accessing Siblings (~)
Direct Clild (>)
For Styling the Webpages
For Building responsive Web Sites (using media queries)(flex, grid)
Instead of directly using CSS, We can use Bootstrap (Mobile File CSS Framework) or Tailwind CSS (Utility First CSS Framework)
Tailwindcss dependencies -> postcss, autoprefixer, postcsscli
Animation
Transition
Scaling

JavaScript (Programming Language/Scripting Language/Dynamically typed)

Version 3
Contains only Objects and Primitives (Not 100% Objects)
Used in Both client side scripting and server side scripting, also used as programming language
let, var, const
Data Types -> Number , String, Boolean, Null, Undefined, NaN(Object)
variable Naming Conventions -> PascalCase (VariableName), camelCase (variableName), snake_case (variable_name), kabab-case (variable-name)  
First class function
Control Flow
Loops (in/of difference)
ES6 Concepts
Scoping
Lexical Environment
Temporal DeadZone
Closure
Higher Order Functions -> Map, Filter, Reduce, Sort, Find
Callbacks
Promises
Promise Chaining
Promise Methods -> all, any, race, allSettled
Async/Await
Error Handling
setTimeout, clearTimeout
setInterval, clearInterval
setIntermediate, clearIntermediate
process.nextTick (node js)
Array
Array Methods
Functions
call, apply, bind
Hoisting -> Normal Functions and Var
IIFE -> Immediately Invocable Function Expression
Arrow Functions (Function Expressions)
this Keyword
DOM (Document Object Model) manipulation
EventListeners
Event propagation
Event bubbling
Nullish Coalescing
Optional Chaining
Logical/Short Circuit Operators
Spread Operator (...)
Rest Parameter (...args)
JSON (JavaScript Object Notation)
JSON.parse, JSON.stringify
REGEX (Regular Express)
Object
Object.entries
Object.keys
Object.values
HTTP Libraries -> XmlHttpRequest (Callback based), fetch(Promise based), Axios(Promise based), Ajax(JQuery)
AbortController
InterceptObserver
Web Sockets (Enables Bidirectional Communication)
Type of Object Declaration
Generator Functions
Classes
LocalStorage, SessionStorage
Cookies, Sessions
DRY - Don't Repeat Yourself
SOLID Principles ->{
    Single Responsibility Principle
    Open Closed Principle
    Liskov Substitution Principle
    Interface Segregation Principle
    Dependency Inversion Principle
}
Shallow Copy, Deep Copy -> JSON methods, loadash, spread operator

Node Js (JavaScript Run Time Environment)

Cross-Platform, Open-Source, Single Threaded, Asynchronous, Event Driven JavaScript Run Time Environment
V8 Engine (Chrome JavaScript and WebAssembly Engine)(Both Complier and Interpreter) -> written in c++ and high performance
CJS (Common JS) vs ES6 -> require/import
REPL -> Read Eval Print Loop (starts when node is entered in cmd)
Changing CJS to ES6 in Node Js -> package.json -> type: "module"
.env -> to Store Environmental Variables during deployment
Github -> git operations, .gitignore file purpose
NVM (Node Version Manager)
NPM (Node Package Manager) -> install, uninstall, update, update All, ~(minor), ^(patch)
package.json vs package-lock.json
Event Loop -> call Stack => Web APIs => Task Queue
Difference between Program, Process, Thread
Process, childProcess -> fork, spawn
Streams -> Chunks, pipe Method
Core Modules -> crypto, path, fs, url, path, queryString, os, http, events, libuv
Important Third Party modules-> mongoose, socket.io, jsonwebtoken, cheerio, CORS, express-session, node-mailer, multer(MIME files), date-fns, moment js, helmet js
Multer -> Multipart/form from the frontend
mongoose -> ODM (Object Document Mapper) for MongoDB
ORMs -> Squealize, Prisma (Relational -> SQL)
libuv -> Thread pool, threads
worker_threads -> Worker, parentPort (For creating Workers threads for data intensive process)
child_process -> spawn(Runs new process in same V8 engine instance), fork (create a new instance of V8 engine)
Cluster -> for parallelism (use multiple cores that are available in you System)
os.cpus (Shows the no. of available cores in the host system)
crypto -> require("crypto").randomBytes(64).toString("hex")
path -> resolve, ext, join
promisify
fs module -> unlink, read, write, append, existSync, Error File Callbacks
streams -> readable, writable, duplex, transform -> chunks
stream methods
String Formats (hex, base64 ect.,)
http -> Server Building
Events Module - on(), emit()
PORT -> Communication EndPoint of a System
StatusCodes -> 200, 201, 204, 400, 404, 401, 403, 500, 300 (Majorly Used codes)
Request Response Cycle
Session, Cookies
Props and Cons of Node js
Rating Limiting with Redis
Redis -> NoSQL key-value pair Database -> In memory Storage -> Can't Store Large amount of data -> Used for caching

Express Js (Server Side JavaScript Framework)

Light weight Framework, used to build scalable and robust Servers
Template Engines
MVC Pattern -> Model View Controller
Neat Folder Structure
Middleware -> req, res, next, error
express.static
express.urlencoded (FormData parsing), express.json (Request data Parsing)
express.json({limit: "100mb"}) -> To overcome 413 Error which is req size exceeded (by default 100kb)
express.Router
Routes -> (Follows waterfall flow, supports regex)
CORS (Cross Origin Resource Sharing) -> WhiteList, Origin, Credentials
Modules
HTTP methods -> GET, POST, PATCH, DELETE, HEAD ect.,
PUT Vs PATCH, GET Vs POST
PostMan/ThunderClient (VS Code Extension) -> for API testing
export.default vs module.exports
API (Application Programming Interface)
RESTful (Representational State Transfer) API Architecture
Authentication (Session based, Token Based (JWT(Json Web Tokens)), OAuth, Passport Js) and Authorization (role based)
CRUD Operations: Create Read Update Delete (With JSON and DB)
mongoose ODM -> Schema Design, Model, Mongoose methods
Props n Cons of Express Js

React Js (JavaScript Frontend Library)

npx create-react-app app-folder-name
NPX -> Node Package eXecute
JavaScript Frontend Library, declarative, Server Side Rendering, Component Based, uses Virtual DOM, Unidirectional Control Flow, uses JSX (JavaScript and XML (Extensive Markup Language)),Manages View(V) in MVC Pattern
Solid Understanding of Reconciliation and Diffing Algorithm
Supports JSX,JS,TSX,TS formats
Short Circuiting
Importing CSS in React
Functional Components :
Hooks -> useState, useEffect, useRef, useReducer, useContext, useCallback, useMemo, useLayoutEffect, useImperativeHandle, useLayoutEffect (Majorly Used)
Custom Hooks -> useWindowSize, useThrottle, useDebounce etc.,
props -> prop Drilling
Context API -> Provider, Consumer
Concept of Memoization
useEffect vs useLayoutEffect
useState vs useRef
useCallback vs useMemo
useState vs useReducer
Context API vs Redux
usePortal
Higher Order Components(HOC)
Dynamic Input Fields
dangerouslySetInnerHTML
Memo
Redux -> Global Store -> Action, Reducer, State (Contains one Global Store)
Redux Thunk
Flow -> Dispatcher => Action => Store => View
React Router (react-router-dom) v6 -> {
    Link, useNavigate, useParams, BrowserRouter, Router, Route (Mostly Used)
}
child -> parent component (using call back)
Bundlers => webpack, Snowpack, parcel ect.,
Error Boundaries => for Managing Errors
Code Splitting
Lazy Load
Error Boundaries
Suspense Component (Fallback)
Infinite Scroll
Pagination
Skeleton Loading
Every Component must have renderComponent Method
Class Based :
Components LifeCycle Methods -> componentDidMount, componentDidUpdate, componentWillUnmount
Difference between create-react-app and create vite
Vite don't bundle the entire files instead it uses ES6 export and import functionalities such that it only updates the component that is changed
Vite Production bundler - RollUp
In react bundling is done for each change in development as well as production process

DBMS (Database Management)

SQL (Structured Query Language) -> MySQL, Oracle SQL etc.,
NoSQL -> MongoDB, Redis, Cassandra, Apache etc.,
ACID Property (Atomicity Consistency Isolation Durability) [ Transaction Control ]
RAID Levels
Scaling
Anomalies (Add, Delete, Update)

Mongo DB

NoSQL DB
Stored documents in BJSON format
Sharding -> Vertical Scaling, Horizontal Scaling(shards)
More or like JSON like Objects
Database, Collection, Document
_id
Show all DBs
Current db
Creating DB
Deleting DB
Creating Collection
Inserting Documents
Deleting documents
InsertOne
InsertMany
UpdateOne -> set, unset
UpdateMany
DeleteOne
DeleteMany
find -> Projection
findOne
Methods -> gt, gte, eq, ne, lt, lte, inc, in, pretty(), count(), sort(), limit(), Skip(), exists, and, or, not, pull, push, expr, rename
Replace
ReplaceMany
Medium
{
    Aggregate
    Aggregation pipeline
    Map Reduce
    Single Purpose aggregation
    Conditional expression
    Sharding achieved using clusters
    in-depth Methods
    Positional Operator
    GridFS
}

SQL (Structured Query Language)

Difference between SQL and MySQL
RDBMS (Relational Database Management System)
RDBMS vs DBMS
If Exists Command
Show Command
Use of IN Keyword
DDL, DML, DCL, TCL, DQL
Describe/desc
Create Delete Insert Update Set Rename Show Select
Where clause
Group by having
Order by
Limit, Offset
Conditional Expression
Switch case
Looping
Index
Keys and Constraints
IFNULL() and COALASCE()
Views -> Virtual Table
Joins -> Inter, Outer, Left, Right, Cross, Self
Union
Subquery
Subquery Execution Flow
Types of data in SQL
Tables -> Rows(Record), Columns(Fields)
Exception Handling
Stored Procedure
Triggers -> Add, Update, Delete

OOPs (Object Oriented Programming)

Pillars -> Class, Object, Abstraction, Encapsulation, Polymorphism, Inheritance
Polymorphism -> Runtime Polymorphism, Compile-time Polymorphism
Overloading, Overriding
Inheritance -> One-to-One, One-to-Many, Many-to-Many, Many-to-One
Single Inheritance
Multiple Inheritance -> Diamond Relationship
Multi-level Inheritance
Hierarchical Inheritance
Composition
association
Singleton Classes
Abstract Classes
Interface
Interface vs Abstract
Anonymous Classes

Java (Object Oriented Programming Language)

8 Primitive Data Types
Used for Software Development, Mobile App Development, Web Development etc.,
Spring, hibernate, Springboot -> Web Development
Testing -> Selenium, Cucumber
Swing, AWT (Abstract Window Toolkit) -> GUI (Graphical User Interface)
Platform Independent
Packages
JDK -> JRE -> JVM -> JIT
JDK -> javac, dev tools etc.,
JRE -> Java Class, Libraries
JVM -> Bytecode Interpreter/Compiler for running the code on different platforms. It also has garbage collector
JIT (Just In Time Compiler)
Variable Naming -> _, $ Allowed
Memory Allocation -> Stack, Heap, String Pool
Access Modifiers -> Public, Private, Protected, Default Access Modifier
A java file can have only one public class and that class must contain main Method
Main function can be over ridded but can't be overloaded
Data Types -> long, int, char, short, byte, boolean, float, double
Not purely Object Oriented Language (Existence of Primitive Data Types)
Wrapper Classes -> boxing, unboxing
Classloader
Util Package
Type Casting -> Lower to Higher is Possible
Loops -> For, While, For Each, do While
Loop labels
break, continue
forEach Function
Iterator
HOF -> Higher Order Functions -> Map, Reduce, Filter
Assignment Operators
Comparison Operator (=,<>,>=,<=)
Bitwise Operators
Pass by Value, Pass by Reference
Interface
Classes
Constructors
Copy Constructor
Shallow Copy, Deep Copy
final -> With Class, Variable, Function
static -> With Class, Variable, Function
finalize function within class -> Garbage Collector
Difference -> Final, Static, Finalize
Super, this keyword
Singleton Classes
Interfaces
Marker Interfaces
Abstract Classes
Difference between abstract and interface
Multithreading -> Runnable Interface, Threads Class -> run() -> start(), pause()
Synchronized keyword
Exception Handling -> try...catch
Rest Parameter in Java
Collection Framework
Functions
Return Type
Arguments/Parameters
new Keyword
Scanner Function
Arrays
Array Methods
Collection vs collection
Object Cloning
JDBC, Spring, Springboot, Hibernate, XML (Extensive Markup Language)

Server

Also a computer that is enhanced to receive data from remote locations nd process those and provide the response
Mainly Linux OS is used in the servers (Comparatively less vulnerable than other OS s)
Load Balancing -> NginX -> Reverse Proxy -> Caching, Rate Limiting, Load Distribution across multiple servers
NginX -> Context, Directives
Docker -> for containerization -> DockerFile, DockerIgnoreFile, Image, Container
Use of Kubernetes for isolation of server
Need of Backup Server to avoid server failures
